# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8  
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Installs Git Bash
      uses: fnkr/github-action-git-bash@v1.1
    - name: Clone JFortniteParse Repository
      run: git clone https://github.com/FabianFG/JFortniteParse
    - name: Build with Gradle
      run: ./gradlew build
    - name: Set Version String
      run: export VERSION_NUMBER=`cat ./resources/main/version.properties`
   # - name: Python Linting
  #    uses: julianwachholz/flake8-action@v1.0.0
   #   with:
        # The name of the check to add annotations to. Generally the same as the job that uses this action
    #    checkName: build
        # Used for internal tests.
    - name: Create a Release
      uses: actions/create-release@v1.1.2
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ env.VERSION_NUMBER }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: Release v${{ env.VERSION_NUMBER }}
        # Text describing the contents of the tag.
        body: This is an auto generated release made by github actions.
        # Path to file with information about the tag.
        # `true` to create a draft (unpublished) release, `false` to create a published one. Default: `false`
        draft: true
        # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
        # Any branch or commit SHA the Git tag is created from, unused if the Git tag already exists. Default: SHA of current commit
